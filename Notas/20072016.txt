(defn f [x]
  (* 2 x))


(defn  vmap [f xs]
(  letfn [ (recursividad [g g2 zs]
                        (if (empty? g2)
                          zs
                          (recursividad g
                                        (rest g2)
                                        (conj zs ( g (first g2))))
                          )
                        )] (recursividad f xs [] )))


(defn total-en [ xs]
  (letfn [ (recursividad [ys ac]
          (if (empty? ys )
            ac
            
            (recursividad (rest ys) (+ ac (first ys )))))]
    (recursividad xs 0)))

(defn mmap [f xs]
  (letfn [(recursividad [g g2 zs]
            (if (empty? g2)
              zs
              (recursividad g 
                            (rest g2)
                            (conj zs
                                  [((first g2)0)
                                   
                                   (g ( (first g2)1))]))))]
    (recursividad f xs {}))) 
            


(defn filter [f xs]
  
  (letfn [(recursividad [g ys zs]
            (if (empty? ys)
              zs
              (recursividad g 
                             (rest ys)
                             (if (g (first ys))
                               (conj zs (first ys)),zs))))]
    (recursividad f xs []))) 


(defn tiene-dos-elementos? [xs]
  (== (count xs)2)) 

          (defn tiene-dos-elementosV? [xs]
  (and (vector? xs) (== (count xs)2))) 

          
          (defn rango [xs]
            (or (and(>= xs 20) (<= xs 30)) (and (>= xs 40) (<= xs 50)))
            )
          
          
 (defn mfilter [f xs]
   (letfn [(recursividad [g ys zs]
             (if (empty? ys)
               zs
               (recursividad g
                             (rest ys)
                             (if (g (first ys)1)  
                               (conj zs (first ys))
                             zs
                             ))))]
    (recursividad f xs {})))  
          
 
 (defn vreduce  [f vi xs]
   (letfn [(recursividad [g vf ys]
             
             (if (empty? ys)
               vf
               (recursividad g
                             (g vf (first ys))
                             (rest ys))))]
     (recursividad f vi xs)))


(defn  vmap [f xs]
(  letfn [ (recursividad [g g2 zs]
                        (if (empty? g2)
                          zs
                          (recursividad g
                                        (rest g2)
                                        (conj zs ( g (first g2))))
                          )
                        )] (recursividad f xs [] )))


 (vmap (fn [x] (* 2 x)) [ 2 3 4])
[4 6 8]


(defn mmap [f zs]
  (letfn [(recursividad [g g2 zs]
            (if (empty? g2)
              zs
              (recursividad g 
                            (rest g2)
                            (conj zs
                                  [((first g2)0)
                                   
                                   (g ( (first g2)1))])))] 


=> (filter tiene-dos-elementos? [[10 20] [30] [40 50]])
[[10 20] [40 50]]


(defn filter [f xs]
  
  (letfn [(recursividad [g ys zs]
            (if (empty? ys)
              zs
              (recursividad g 
                             (rest ys)
                             (if (g (first ys))
                               (conj zs (first ys)),zs))))]
    (recursividad f xs []))) 


(defn tiene-dos-elementos? [xs]
  (== (count xs)2)) 
=> (filter tiene-dos-elementos? ["ho" "l" "a!"])
["ho" "a!"]


          (defn tiene-dos-elementosV? [xs]
  (and (vector? xs) (== (count xs)2))) 


(filter tiene-dos-elementosV? [[10 20] 30 [40 50]])
[[10 20] [40 50]]


tiene-dos-elementosV?
            
            (recursividad f xs   {} ))) 


 (defn rango [xs]
            (or (and(>= xs 20) (<= xs 30)) (and (>= xs 40) (<= xs 50)))
            )

 (filter rango [10 15 25 40 30 27 42])
[25 40 30 27 42]



=> (filter  (fn [xs]
               (or (and(>= xs 20) (<= xs 30)) (and (>= xs 40) (<= xs 50)))
               )[10 15 25 40 30 27 42])
[25 40 30 27 42]


=> (vreduce (fn [x y]
              (+ x y))
            
            0 [4 5 3])
12


=> (vreduce (fn [x y]
              (* x y))
            
            1 [4 5 3])
60
=> (vreduce (fn [x y]
              (conj x [(count x)y]))
            {} [10 20 30])
{0 10, 1 20, 2 30}